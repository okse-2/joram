/* The following code was generated by JFlex 1.3.2 on 18/06/04 16:25 */

/*
 * JORAM: Java(TM) Open Reliable Asynchronous Messaging
 * Copyright (C) 2001 - 2004 ScalAgent Distributed Technologies
 * Copyright (C) 2004 - Bull SA
 * Copyright (C) 1996 - 2000 Dyade
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
 * USA.
 *
 * Initial developer(s): Frederic Maistre (INRIA)
 * Contributor(s): Nicolas Tachker (Bull SA)
 *                 ScalAgent Distributed Technologies
 */

/*
  Subset of SQL 92 syntax for message selectors.
  Author: Nicolas Tachker.
*/
package org.objectweb.joram.shared.selectors;

import java_cup.runtime.*;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.2
 * on 18/06/04 16:25 from the specification file
 * <tt>file:/joramSelector/JMS/selec.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 25,  2,  0,  3,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    42, 24,  0, 24, 22, 24, 24, 23, 29, 30, 27, 26, 34, 17, 15, 28, 
     4, 11, 10, 10, 12, 12, 12, 12,  5,  5, 24, 24, 32, 31, 33, 24, 
    24, 21,  9, 39, 14, 16, 13, 22, 22, 37, 22, 38,  6, 22, 35, 36, 
    40, 22, 19,  7, 18, 20, 22, 41,  8, 22, 22, 24, 24, 24,  0, 22, 
     0, 21,  9, 39, 14, 16, 13, 22, 22, 37, 22, 38,  6, 22, 35, 36, 
    40, 22, 19,  7, 18, 20, 22, 41,  8, 22, 22, 24,  0, 24, 24,  0
  };

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    43,    86,    43,   129,   172,   215,   258,   301,   344, 
      387,   430,    43,   473,   516,   559,    43,    43,    43,    43, 
       43,    43,   602,   645,    43,   688,   731,   774,   817,   860, 
       43,    43,   903,   946,   989,  1032,    43,    43,  1075,  1118, 
     1161,  1204,  1247,  1290,  1333,  1376,  1419,  1462,    43,    43, 
       43,  1505,  1548,   258,   258,   258,    43,  1591,  1634,  1677, 
     1720,  1763,  1806,  1849,  1892,  1935,  1978,  2021,   258,  1462, 
     2064,  2107,    43,  2150,  2193,  2236,   258,  2279,  2322,   258, 
      258,  2365,  2408,  2451,  2494,  2537,  2580,  2623,  2666,  2709, 
     2752,  2795,   258,  2838,  2881,  2924,  2967,   258,  3010,  3053, 
     3096,  3139,  3182,  3225,  3268,  3311,  3354,  3397,  3440,  3483, 
     3526,  3569,  3612,  3655,    43,  3698,  3741,  3784,  3827,  3870, 
     3913,  3956,  3999,  4042,  4085,  4128,  4171,  4214,  4257,  4300, 
     4343,  4386,  4386,  4429,  4472,  4515,  4558,  4601,  4644
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\2\1\3\2\4\1\5\1\6\1\7\2\10\1\11"+
    "\3\6\1\12\1\10\1\13\1\14\1\15\1\16\2\10"+
    "\1\17\1\10\1\20\1\2\1\4\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\4\10\1\4\55\0\1\4\54\0\1\35\1\36"+
    "\1\37\1\40\1\41\1\0\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\36\0\2\6\1\37\1\40\2\0"+
    "\3\6\1\45\1\46\1\47\1\50\36\0\13\10\1\0"+
    "\1\10\1\0\5\10\14\0\2\10\1\51\4\10\5\0"+
    "\13\10\1\0\1\10\1\0\5\10\14\0\7\10\5\0"+
    "\13\10\1\0\1\52\1\0\5\10\14\0\7\10\5\0"+
    "\13\10\1\0\1\10\1\0\3\10\1\53\1\10\14\0"+
    "\7\10\5\0\2\47\4\0\3\47\42\0\3\10\1\54"+
    "\7\10\1\0\1\10\1\0\5\10\14\0\7\10\5\0"+
    "\13\10\1\0\1\10\1\0\1\10\1\55\3\10\14\0"+
    "\7\10\5\0\13\10\1\0\1\10\1\0\5\10\14\0"+
    "\1\56\6\10\5\0\23\57\1\60\10\57\2\0\11\57"+
    "\37\0\1\61\1\0\1\62\50\0\1\63\17\0\13\10"+
    "\1\0\1\10\1\0\2\10\1\64\2\10\14\0\1\10"+
    "\1\65\5\10\5\0\13\10\1\0\1\10\1\0\1\10"+
    "\1\66\3\10\14\0\7\10\5\0\3\10\1\67\7\10"+
    "\1\0\1\10\1\0\5\10\14\0\1\70\6\10\5\0"+
    "\1\35\1\36\1\71\3\0\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\36\0\2\36\4\0\3\36\1\45"+
    "\1\46\1\47\1\50\36\0\1\72\1\73\3\0\6\73"+
    "\1\0\1\73\4\0\1\73\21\0\1\73\7\0\1\74"+
    "\1\36\1\71\3\0\3\74\1\45\1\46\1\47\1\50"+
    "\36\0\1\44\1\36\1\71\3\0\3\44\1\45\1\46"+
    "\1\47\1\50\36\0\1\75\1\36\1\71\3\0\3\75"+
    "\1\45\1\46\1\47\1\50\36\0\2\47\4\0\3\47"+
    "\1\45\1\46\1\0\1\50\36\0\2\76\4\0\3\76"+
    "\4\0\1\77\10\0\1\77\24\0\13\10\1\0\1\10"+
    "\1\0\5\10\14\0\3\10\1\100\3\10\5\0\13\10"+
    "\1\0\1\10\1\0\1\101\4\10\14\0\7\10\5\0"+
    "\2\10\1\102\10\10\1\0\1\10\1\0\5\10\14\0"+
    "\7\10\5\0\13\10\1\0\1\10\1\0\5\10\14\0"+
    "\4\10\1\103\2\10\5\0\13\10\1\0\1\10\1\0"+
    "\2\10\1\104\2\10\14\0\7\10\5\0\12\10\1\105"+
    "\1\0\1\10\1\0\5\10\14\0\7\10\5\0\23\57"+
    "\1\106\10\57\2\0\11\57\27\0\1\57\27\0\2\10"+
    "\1\107\10\10\1\0\1\10\1\0\5\10\14\0\7\10"+
    "\5\0\13\10\1\0\1\10\1\0\1\110\4\10\14\0"+
    "\7\10\5\0\1\72\1\73\1\111\2\0\6\73\1\0"+
    "\1\73\4\0\1\73\21\0\1\73\7\0\2\112\1\111"+
    "\2\0\6\112\1\0\1\112\4\0\1\112\21\0\1\112"+
    "\7\0\1\113\1\36\1\71\3\0\3\113\1\45\1\46"+
    "\1\47\1\50\36\0\1\114\1\36\1\71\3\0\3\114"+
    "\1\45\1\46\1\47\1\50\36\0\2\76\4\0\3\76"+
    "\1\45\1\46\40\0\2\76\4\0\3\76\42\0\13\10"+
    "\1\0\1\115\1\0\5\10\14\0\7\10\5\0\13\10"+
    "\1\0\1\10\1\0\5\10\14\0\6\10\1\116\5\0"+
    "\3\10\1\104\7\10\1\0\1\10\1\0\5\10\14\0"+
    "\7\10\5\0\13\10\1\0\1\10\1\0\3\10\1\117"+
    "\1\10\14\0\7\10\5\0\13\10\1\0\1\120\1\0"+
    "\5\10\14\0\7\10\5\0\2\10\1\121\10\10\1\0"+
    "\1\10\1\0\5\10\14\0\7\10\5\0\13\10\1\0"+
    "\1\10\1\0\5\10\14\0\7\10\1\122\4\0\2\123"+
    "\1\111\2\0\6\123\1\0\1\123\4\0\1\123\21\0"+
    "\1\123\7\0\1\124\1\36\1\71\3\0\3\124\1\45"+
    "\1\46\1\47\1\50\36\0\1\125\1\36\1\71\3\0"+
    "\3\125\1\45\1\46\1\47\1\50\36\0\13\10\1\0"+
    "\1\126\1\0\5\10\14\0\7\10\5\0\13\10\1\0"+
    "\1\10\1\0\5\10\14\0\5\10\1\127\1\10\12\0"+
    "\1\130\45\0\2\131\1\111\2\0\6\131\1\0\1\131"+
    "\4\0\1\131\21\0\1\131\7\0\1\132\1\36\1\71"+
    "\3\0\3\132\1\45\1\46\1\47\1\50\36\0\1\133"+
    "\1\36\1\71\3\0\3\133\1\45\1\46\1\47\1\50"+
    "\36\0\13\10\1\0\1\134\1\0\5\10\14\0\7\10"+
    "\5\0\13\10\1\0\1\135\1\0\5\10\14\0\7\10"+
    "\21\0\1\136\36\0\2\137\1\111\2\0\6\137\1\0"+
    "\1\137\4\0\1\137\21\0\1\137\7\0\1\140\1\36"+
    "\1\71\3\0\3\140\1\45\1\46\1\47\1\50\36\0"+
    "\1\141\1\36\1\71\3\0\3\141\1\45\1\46\1\47"+
    "\1\50\36\0\13\10\1\0\1\10\1\0\5\10\14\0"+
    "\1\142\6\10\23\0\1\143\34\0\2\144\1\111\2\0"+
    "\6\144\1\0\1\144\4\0\1\144\21\0\1\144\7\0"+
    "\1\145\1\36\1\71\3\0\3\145\1\45\1\46\1\47"+
    "\1\50\36\0\1\146\1\36\1\71\3\0\3\146\1\45"+
    "\1\46\1\47\1\50\103\0\1\147\5\0\2\150\1\111"+
    "\2\0\6\150\1\0\1\150\4\0\1\150\21\0\1\150"+
    "\7\0\1\151\1\36\1\71\3\0\3\151\1\45\1\46"+
    "\1\47\1\50\36\0\1\152\1\36\1\71\3\0\3\152"+
    "\1\45\1\46\1\47\1\50\52\0\1\153\36\0\2\154"+
    "\1\111\2\0\6\154\1\0\1\154\4\0\1\154\21\0"+
    "\1\154\7\0\1\155\1\36\1\71\3\0\3\155\1\45"+
    "\1\46\1\47\1\50\36\0\1\156\1\36\1\71\3\0"+
    "\3\156\1\45\1\46\1\47\1\50\52\0\1\157\36\0"+
    "\2\160\1\111\2\0\6\160\1\0\1\160\4\0\1\160"+
    "\21\0\1\160\7\0\1\161\1\36\1\71\3\0\3\161"+
    "\1\45\1\46\1\47\1\50\36\0\1\162\1\36\1\71"+
    "\3\0\3\162\1\45\1\46\1\47\1\50\75\0\1\163"+
    "\13\0\2\164\1\111\2\0\6\164\1\0\1\164\4\0"+
    "\1\164\21\0\1\164\7\0\1\165\1\36\1\71\3\0"+
    "\3\165\1\45\1\46\1\47\1\50\36\0\1\166\1\36"+
    "\1\71\3\0\3\166\1\45\1\46\1\47\1\50\36\0"+
    "\2\167\1\111\2\0\6\167\1\0\1\167\4\0\1\167"+
    "\21\0\1\167\7\0\1\170\1\36\1\71\3\0\3\170"+
    "\1\45\1\46\1\47\1\50\36\0\1\171\1\36\1\71"+
    "\3\0\3\171\1\45\1\46\1\47\1\50\36\0\2\172"+
    "\1\111\2\0\6\172\1\0\1\172\4\0\1\172\21\0"+
    "\1\172\7\0\1\173\1\36\1\71\3\0\3\173\1\45"+
    "\1\46\1\47\1\50\36\0\1\174\1\36\1\71\3\0"+
    "\3\174\1\45\1\46\1\47\1\50\36\0\2\175\1\111"+
    "\2\0\6\175\1\0\1\175\4\0\1\175\21\0\1\175"+
    "\7\0\1\176\1\36\1\71\3\0\3\176\1\45\1\46"+
    "\1\47\1\50\36\0\1\177\1\36\1\71\3\0\3\177"+
    "\1\45\1\46\1\47\1\50\36\0\2\200\1\111\2\0"+
    "\6\200\1\0\1\200\4\0\1\200\21\0\1\200\7\0"+
    "\1\201\1\36\1\71\3\0\3\201\1\45\1\46\1\47"+
    "\1\50\36\0\1\202\1\36\1\71\3\0\3\202\1\45"+
    "\1\46\1\47\1\50\36\0\2\203\1\111\2\0\6\203"+
    "\1\0\1\203\4\0\1\203\21\0\1\203\7\0\1\204"+
    "\1\36\1\71\3\0\3\204\1\45\1\46\1\47\1\50"+
    "\36\0\1\205\1\36\1\71\3\0\3\205\1\45\1\46"+
    "\1\47\1\50\36\0\2\206\1\111\2\0\6\206\1\0"+
    "\1\206\4\0\1\206\21\0\1\206\7\0\1\207\1\36"+
    "\1\71\3\0\3\207\1\45\1\46\1\47\1\50\40\0"+
    "\1\111\50\0\1\210\1\36\1\71\3\0\3\210\1\45"+
    "\1\46\1\47\1\50\36\0\1\211\1\36\1\71\3\0"+
    "\3\211\1\45\1\46\1\47\1\50\36\0\1\212\1\36"+
    "\1\71\3\0\3\212\1\45\1\46\1\47\1\50\36\0"+
    "\1\213\1\36\1\71\3\0\3\213\1\45\1\46\1\47"+
    "\1\50\36\0\2\36\1\71\3\0\3\36\1\45\1\46"+
    "\1\47\1\50\32\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  9,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1, 
     9,  9,  9,  9,  9,  9,  1,  1,  9,  1,  1,  1,  1,  1,  9,  9, 
     0,  1,  1,  1,  9,  9,  1,  0,  1,  1,  1,  1,  1,  1,  0,  0, 
     9,  9,  9,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  0,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  1,  1, 
     1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1, 
     1,  1,  0,  1,  1,  1,  0,  1,  1,  1,  0,  1,  1,  1,  0,  0, 
     1,  1,  9,  0,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  0, 
     1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
    /* To create a new java_cup.runtime.Symbol with information about
       the current token, the token will have no value in this
       case. */
    private Symbol symbol(int type) {
      return new Symbol(type, yyline, yycolumn);
    }
    
    /* Also creates a new java_cup.runtime.Symbol with information
       about the current token, but this object has a value. */
    private Symbol symbol(int type, Object value) {
      return new Symbol(type, yyline, yycolumn, value);
    }

  /* assumes correct representation of a long value for 
     specified radix in String s */
  private long parseLong(String s, int radix) {
    return Long.valueOf(s,radix).longValue();
  }

  /** Constructor called by the <code>Selector</code> class. */
  Lexer(String in) {
    this(new java.io.StringReader(in));
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[4687];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (yy_currentPos < yy_endRead) return yy_buffer[yy_currentPos++];

    /* if the eof is reached, we don't need to work hard */ 
    if (yy_atEOF) return YYEOF;

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if ( numRead == -1 ) return YYEOF;

    yy_endRead+= numRead;

    return yy_buffer[yy_currentPos++];
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;


    while (true) {

      boolean yy_r = false;
      for (yy_currentPos = yy_startRead; yy_currentPos < yy_markedPos;
                                                      yy_currentPos++) {
        switch (yy_buffer[yy_currentPos]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        if ( yy_advance() == '\n' ) yyline--;
        if ( !yy_atEOF ) yy_currentPos--;
      }

      yy_action = -1;

      yy_currentPos = yy_startRead = yy_markedPos;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          yy_input = yy_advance();

          if ( yy_input == YYEOF ) break yy_forAction;

          int yy_next = yytrans[ yy_rowMap[yy_state] + yycmap[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = YY_ATTRIBUTE[yy_state];
          if ( (yy_attributes & 1) > 0 ) {
            yy_action = yy_state; 
            yy_markedPos = yy_currentPos; 
            if ( (yy_attributes & 8) > 0 ) break yy_forAction;
          }

        }
      }


      switch (yy_action) {

        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 11: 
        case 13: 
        case 14: 
        case 25: 
        case 26: 
        case 27: 
        case 40: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 51: 
        case 52: 
        case 63: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 70: 
        case 77: 
        case 78: 
        case 85: 
        case 86: 
        case 91: 
          {  return symbol(sym.ID, new String(yytext())); }
        case 140: break;
        case 69: 
          {  return symbol(sym.STRING, new String(yytext())); }
        case 141: break;
        case 114: 
          {  return symbol(sym.NOTBETWEEN);  }
        case 142: break;
        case 97: 
          {  return symbol(sym.BETWEEN);  }
        case 143: break;
        case 92: 
          {  return symbol(sym.ESCAPE);  }
        case 144: break;
        case 30: 
          {  if ((yytext().substring(0,yylength()-1)).equals((Long.MIN_VALUE+"").substring(1,yylength())))
                              return symbol(sym.MIN_LONG, new Long(Long.MIN_VALUE));
                            return symbol(sym.LONG, new Long(yytext().substring(0,yylength()-1))); 
                           }
        case 145: break;
        case 29: 
        case 38: 
        case 61: 
        case 132: 
        case 134: 
        case 135: 
        case 136: 
        case 137: 
        case 138: 
          {  return symbol(sym.DOUBLE, new Double(yytext()));  }
        case 146: break;
        case 28: 
        case 33: 
        case 34: 
        case 35: 
        case 59: 
        case 60: 
        case 74: 
        case 75: 
        case 83: 
        case 84: 
        case 89: 
        case 90: 
        case 95: 
        case 96: 
        case 100: 
        case 101: 
        case 104: 
        case 105: 
        case 108: 
        case 109: 
        case 112: 
        case 113: 
        case 116: 
        case 117: 
        case 119: 
        case 120: 
        case 122: 
        case 123: 
        case 125: 
        case 126: 
        case 128: 
        case 129: 
        case 131: 
          {  return symbol(sym.INT, new Integer((int) parseLong(yytext(),8)));  }
        case 147: break;
        case 24: 
          {  return symbol(sym.COMMA);  }
        case 148: break;
        case 23: 
          {  return symbol(sym.GT);  }
        case 149: break;
        case 22: 
          {  return symbol(sym.LT);  }
        case 150: break;
        case 21: 
          {  return symbol(sym.EQ);  }
        case 151: break;
        case 20: 
          {  return symbol(sym.RPAREN);  }
        case 152: break;
        case 19: 
          {  return symbol(sym.LPAREN);  }
        case 153: break;
        case 1: 
        case 10: 
        case 15: 
          {  throw new Error("Illegal character <"+yytext()+">");  }
        case 154: break;
        case 2: 
        case 3: 
          {  /* just skip what was found, do nothing */  }
        case 155: break;
        case 4: 
        case 5: 
          {  return symbol(sym.INT, new Integer(yytext()));  }
        case 156: break;
        case 12: 
          {  return symbol(sym.MINUS);  }
        case 157: break;
        case 16: 
          {  return symbol(sym.PLUS);  }
        case 158: break;
        case 17: 
          {  return symbol(sym.TIMES);  }
        case 159: break;
        case 18: 
          {  return symbol(sym.DIVIDE);  }
        case 160: break;
        case 31: 
          {  return symbol(sym.SHORT, new Short(yytext().substring(0,yylength()-1)));  }
        case 161: break;
        case 36: 
          {  return symbol(sym.FLOAT, new Float(yytext()));  }
        case 162: break;
        case 37: 
          {  return symbol(sym.DOUBLE, new Double(yytext().substring(0,yylength()-1)));  }
        case 163: break;
        case 48: 
          {  return symbol(sym.LE);  }
        case 164: break;
        case 49: 
          {  return symbol(sym.NEQ);  }
        case 165: break;
        case 50: 
          {  return symbol(sym.GE);  }
        case 166: break;
        case 53: 
          {  return symbol(sym.OR);  }
        case 167: break;
        case 54: 
          {  return symbol(sym.IS);  }
        case 168: break;
        case 55: 
          {  return symbol(sym.IN);  }
        case 169: break;
        case 56: 
          {  return symbol(sym.LONG, new Long(parseLong(yytext().substring(0,yylength()-1),8)));  }
        case 170: break;
        case 57: 
        case 58: 
        case 73: 
        case 82: 
        case 88: 
        case 94: 
        case 99: 
        case 103: 
        case 107: 
          {  return symbol(sym.INT, new Integer((int) parseLong(yytext().substring(2),16)));  }
        case 171: break;
        case 68: 
          {  return symbol(sym.AND);  }
        case 172: break;
        case 71: 
          {  return symbol(sym.NOT);  }
        case 173: break;
        case 72: 
          {  return symbol(sym.LONG, new Long(parseLong(yytext().substring(2,yylength()-1),16)));  }
        case 174: break;
        case 76: 
          {  return symbol(sym.LIKE);  }
        case 175: break;
        case 79: 
          {  return symbol(sym.BOOLEAN, new Boolean(yytext()));  }
        case 176: break;
        case 80: 
          {  return symbol(sym.NULL);  }
        case 177: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
