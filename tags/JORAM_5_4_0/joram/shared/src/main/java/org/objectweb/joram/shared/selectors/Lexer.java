/* The following code was generated by JFlex 1.3.2 on 03/02/05 16:11 */

/*
 * JORAM: Java(TM) Open Reliable Asynchronous Messaging
 * Copyright (C) 2004 - ScalAgent Distributed Technologies
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
 * USA.
 *
 * Initial developer(s): Nicolas Tachker (ScalAgent)
 * Contributor(s):
 */

/*
  Subset of SQL 92 syntax for message selectors.
  Author: Nicolas Tachker.
*/
package org.objectweb.joram.shared.selectors;

import java_cup.runtime.*;
import java.io.*;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.2
 * on 03/02/05 16:11 from the specification file
 * <tt>file:joramSelector/JMS/selec.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\27\1\3\1\2\1\0\1\3\1\1\16\27\4\0\1\52\1\0"+
    "\1\31\1\0\1\26\2\0\1\30\1\35\1\36\1\33\1\32\1\42"+
    "\1\21\1\17\1\34\1\4\1\13\2\12\4\14\2\5\2\0\1\40"+
    "\1\37\1\41\2\0\1\25\1\11\1\47\1\16\1\20\1\15\2\26"+
    "\1\45\1\26\1\46\1\6\1\26\1\43\1\44\1\50\1\26\1\23"+
    "\1\7\1\22\1\24\1\26\1\51\1\10\2\26\4\0\1\26\1\0"+
    "\1\25\1\11\1\47\1\16\1\20\1\15\2\26\1\45\1\26\1\46"+
    "\1\6\1\26\1\43\1\44\1\50\1\26\1\23\1\7\1\22\1\24"+
    "\1\26\1\51\1\10\2\26\4\0\41\27\2\0\4\26\4\0\1\26"+
    "\12\0\1\26\4\0\1\26\5\0\27\26\1\0\37\26\1\0\u0128\26"+
    "\2\0\22\26\34\0\136\26\2\0\11\26\2\0\7\26\16\0\2\26"+
    "\16\0\5\26\11\0\1\26\21\0\117\27\21\0\3\27\27\0\1\26"+
    "\13\0\1\26\1\0\3\26\1\0\1\26\1\0\24\26\1\0\54\26"+
    "\1\0\10\26\2\0\32\26\14\0\202\26\1\0\4\27\5\0\71\26"+
    "\2\0\2\26\2\0\2\26\3\0\46\26\2\0\2\26\67\0\46\26"+
    "\2\0\1\26\7\0\47\26\11\0\21\27\1\0\27\27\1\0\3\27"+
    "\1\0\1\27\1\0\2\27\1\0\1\27\13\0\33\26\5\0\3\26"+
    "\56\0\32\26\5\0\13\26\13\27\12\0\12\27\6\0\1\27\143\26"+
    "\1\0\1\26\7\27\2\0\6\27\2\26\2\27\1\0\4\27\2\0"+
    "\12\27\3\26\22\0\1\27\1\26\1\27\33\26\3\0\33\27\65\0"+
    "\46\26\13\27\u0150\0\3\27\1\0\65\26\2\0\1\27\1\26\20\27"+
    "\2\0\1\26\4\27\3\0\12\26\2\27\2\0\12\27\21\0\3\27"+
    "\1\0\10\26\2\0\2\26\2\0\26\26\1\0\7\26\1\0\1\26"+
    "\3\0\4\26\2\0\1\27\1\0\7\27\2\0\2\27\2\0\3\27"+
    "\11\0\1\27\4\0\2\26\1\0\3\26\2\27\2\0\12\27\4\26"+
    "\16\0\1\27\2\0\6\26\4\0\2\26\2\0\26\26\1\0\7\26"+
    "\1\0\2\26\1\0\2\26\1\0\2\26\2\0\1\27\1\0\5\27"+
    "\4\0\2\27\2\0\3\27\13\0\4\26\1\0\1\26\7\0\14\27"+
    "\3\26\14\0\3\27\1\0\7\26\1\0\1\26\1\0\3\26\1\0"+
    "\26\26\1\0\7\26\1\0\2\26\1\0\5\26\2\0\1\27\1\26"+
    "\10\27\1\0\3\27\1\0\3\27\2\0\1\26\17\0\1\26\5\0"+
    "\12\27\21\0\3\27\1\0\10\26\2\0\2\26\2\0\26\26\1\0"+
    "\7\26\1\0\2\26\2\0\4\26\2\0\1\27\1\26\6\27\3\0"+
    "\2\27\2\0\3\27\10\0\2\27\4\0\2\26\1\0\3\26\4\0"+
    "\12\27\22\0\2\27\1\0\6\26\3\0\3\26\1\0\4\26\3\0"+
    "\2\26\1\0\1\26\1\0\2\26\3\0\2\26\3\0\3\26\3\0"+
    "\10\26\1\0\3\26\4\0\5\27\3\0\3\27\1\0\4\27\11\0"+
    "\1\27\17\0\11\27\21\0\3\27\1\0\10\26\1\0\3\26\1\0"+
    "\27\26\1\0\12\26\1\0\5\26\4\0\7\27\1\0\3\27\1\0"+
    "\4\27\7\0\2\27\11\0\2\26\4\0\12\27\22\0\2\27\1\0"+
    "\10\26\1\0\3\26\1\0\27\26\1\0\12\26\1\0\5\26\4\0"+
    "\7\27\1\0\3\27\1\0\4\27\7\0\2\27\7\0\1\26\1\0"+
    "\2\26\4\0\12\27\22\0\2\27\1\0\10\26\1\0\3\26\1\0"+
    "\27\26\1\0\20\26\4\0\6\27\2\0\3\27\1\0\4\27\11\0"+
    "\1\27\10\0\2\26\4\0\12\27\22\0\2\27\1\0\22\26\3\0"+
    "\30\26\1\0\11\26\1\0\1\26\2\0\7\26\3\0\1\27\4\0"+
    "\6\27\1\0\1\27\1\0\10\27\22\0\2\27\15\0\60\26\1\27"+
    "\2\26\7\27\4\0\10\26\10\27\1\0\12\27\47\0\2\26\1\0"+
    "\1\26\2\0\2\26\1\0\1\26\2\0\1\26\6\0\4\26\1\0"+
    "\7\26\1\0\3\26\1\0\1\26\1\0\1\26\2\0\2\26\1\0"+
    "\4\26\1\27\2\26\6\27\1\0\2\27\1\26\2\0\5\26\1\0"+
    "\1\26\1\0\6\27\2\0\12\27\2\0\2\26\42\0\1\26\27\0"+
    "\2\27\6\0\12\27\13\0\1\27\1\0\1\27\1\0\1\27\4\0"+
    "\2\27\10\26\1\0\42\26\6\0\24\27\1\0\2\27\4\26\4\0"+
    "\10\27\1\0\44\27\11\0\1\27\71\0\42\26\1\0\5\26\1\0"+
    "\2\26\1\0\7\27\3\0\4\27\6\0\12\27\6\0\6\26\4\27"+
    "\106\0\46\26\12\0\47\26\11\0\132\26\5\0\104\26\5\0\122\26"+
    "\6\0\7\26\1\0\77\26\1\0\1\26\1\0\4\26\2\0\7\26"+
    "\1\0\1\26\1\0\4\26\2\0\47\26\1\0\1\26\1\0\4\26"+
    "\2\0\37\26\1\0\1\26\1\0\4\26\2\0\7\26\1\0\1\26"+
    "\1\0\4\26\2\0\7\26\1\0\7\26\1\0\27\26\1\0\37\26"+
    "\1\0\1\26\1\0\4\26\2\0\7\26\1\0\47\26\1\0\23\26"+
    "\16\0\11\27\56\0\125\26\14\0\u026c\26\2\0\10\26\12\0\32\26"+
    "\5\0\113\26\225\0\64\26\40\27\7\0\1\26\4\0\12\27\41\0"+
    "\4\27\1\0\12\27\6\0\130\26\10\0\51\26\1\27\u0556\0\234\26"+
    "\4\0\132\26\6\0\26\26\2\0\6\26\2\0\46\26\2\0\6\26"+
    "\2\0\10\26\1\0\1\26\1\0\1\26\1\0\1\26\1\0\37\26"+
    "\2\0\65\26\1\0\7\26\1\0\1\26\3\0\3\26\1\0\7\26"+
    "\3\0\4\26\2\0\6\26\4\0\15\26\5\0\3\26\1\0\7\26"+
    "\17\0\4\27\32\0\5\27\20\0\2\26\51\0\6\27\17\0\1\26"+
    "\40\0\20\26\40\0\15\27\4\0\1\27\40\0\1\26\4\0\1\26"+
    "\2\0\12\26\1\0\1\26\3\0\5\26\6\0\1\26\1\0\1\26"+
    "\1\0\1\26\1\0\4\26\1\0\3\26\1\0\7\26\46\0\44\26"+
    "\u0e81\0\3\26\31\0\11\26\6\27\1\0\5\26\2\0\3\26\6\0"+
    "\124\26\4\0\2\27\2\0\2\26\2\0\136\26\6\0\50\26\4\0"+
    "\136\26\21\0\30\26\u0248\0\u19b6\26\112\0\u51a6\26\132\0\u048d\26\u0773\0"+
    "\u2ba4\26\u215c\0\u012e\26\322\0\7\26\14\0\5\26\5\0\1\26\1\27"+
    "\12\26\1\0\15\26\1\0\5\26\1\0\1\26\1\0\2\26\1\0"+
    "\2\26\1\0\154\26\41\0\u016b\26\22\0\100\26\2\0\66\26\50\0"+
    "\14\26\44\0\4\27\17\0\2\26\30\0\3\26\31\0\1\26\6\0"+
    "\3\26\1\0\1\26\1\0\207\26\2\0\1\27\4\0\1\26\13\0"+
    "\12\27\7\0\32\26\4\0\1\26\1\0\32\26\12\0\132\26\3\0"+
    "\6\26\2\0\6\26\2\0\6\26\2\0\3\26\3\0\2\26\3\0"+
    "\2\26\22\0\3\27\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    43,    86,    43,   129,   172,   215,   258,   301,   344, 
      387,   430,    43,   473,   516,   559,   602,    43,    43,    43, 
       43,    43,    43,   645,   688,    43,   731,   774,   817,   860, 
      903,    43,    43,   946,   989,  1032,  1075,    43,    43,  1118, 
     1161,  1204,  1247,  1290,  1333,  1376,  1419,  1462,  1505,    43, 
       43,    43,  1548,  1591,   258,   258,   258,    43,  1634,  1677, 
     1720,  1763,  1806,  1849,  1892,  1935,  1978,  2021,  2064,   258, 
     2107,  2150,  2193,  2236,    43,  2279,  2322,  2365,   258,  2408, 
     2451,   258,   559,   602,   258,  2494,  2537,  2580,  2623,  2666, 
     2709,  2752,  2795,  2838,  2881,  2924,   258,  2967,  3010,  3053, 
     3096,   258,  3139,  3182,  3225,  3268,  3311,  3354,  3397,  3440, 
     3483,  3526,  3569,  3612,  3655,  3698,  3741,  3784,    43,  3827, 
     3870,  3913,  3956,  3999,  4042,  4085,  4128,  4171,  4214,  4257, 
     4300,  4343,  4386,  4429,  4472,  4515,  4515,  4558,  4601,  4644, 
     4687,  4730,  4773
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\2\1\3\2\4\1\5\1\6\1\7\2\10\1\11"+
    "\3\6\1\12\1\10\1\13\1\14\1\15\1\16\2\10"+
    "\1\17\1\10\1\2\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\4\10\1\4\55\0\1\4\54\0\1\36\1\37"+
    "\1\40\1\41\1\42\1\0\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\36\0\2\6\1\40\1\41\2\0"+
    "\3\6\1\46\1\47\1\50\1\51\36\0\13\10\1\0"+
    "\1\10\1\0\6\10\13\0\2\10\1\52\4\10\5\0"+
    "\13\10\1\0\1\10\1\0\6\10\13\0\7\10\5\0"+
    "\13\10\1\0\1\53\1\0\6\10\13\0\7\10\5\0"+
    "\13\10\1\0\1\10\1\0\3\10\1\54\2\10\13\0"+
    "\7\10\5\0\2\50\4\0\3\50\42\0\3\10\1\55"+
    "\7\10\1\0\1\10\1\0\6\10\13\0\7\10\5\0"+
    "\13\10\1\0\1\10\1\0\1\10\1\56\4\10\13\0"+
    "\7\10\5\0\13\10\1\0\1\10\1\0\6\10\13\0"+
    "\1\57\6\10\1\0\1\60\2\0\25\60\1\0\22\60"+
    "\1\61\2\0\26\61\1\0\21\61\37\0\1\62\1\0"+
    "\1\63\50\0\1\64\17\0\13\10\1\0\1\10\1\0"+
    "\2\10\1\65\3\10\13\0\1\10\1\66\5\10\5\0"+
    "\13\10\1\0\1\10\1\0\1\10\1\67\4\10\13\0"+
    "\7\10\5\0\3\10\1\70\7\10\1\0\1\10\1\0"+
    "\6\10\13\0\1\71\6\10\5\0\1\36\1\37\1\72"+
    "\3\0\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\36\0\2\37\4\0\3\37\1\46\1\47\1\50\1\51"+
    "\36\0\1\73\1\74\3\0\6\74\1\0\1\74\4\0"+
    "\1\74\21\0\1\74\7\0\1\75\1\37\1\72\3\0"+
    "\3\75\1\46\1\47\1\50\1\51\36\0\1\45\1\37"+
    "\1\72\3\0\3\45\1\46\1\47\1\50\1\51\36\0"+
    "\1\76\1\37\1\72\3\0\3\76\1\46\1\47\1\50"+
    "\1\51\36\0\2\50\4\0\3\50\1\46\1\47\1\0"+
    "\1\51\36\0\2\77\4\0\3\77\4\0\1\100\10\0"+
    "\1\100\24\0\13\10\1\0\1\10\1\0\6\10\13\0"+
    "\3\10\1\101\3\10\5\0\13\10\1\0\1\10\1\0"+
    "\1\102\5\10\13\0\7\10\5\0\2\10\1\103\10\10"+
    "\1\0\1\10\1\0\6\10\13\0\7\10\5\0\13\10"+
    "\1\0\1\10\1\0\6\10\13\0\4\10\1\104\2\10"+
    "\5\0\13\10\1\0\1\10\1\0\2\10\1\105\3\10"+
    "\13\0\7\10\5\0\12\10\1\106\1\0\1\10\1\0"+
    "\6\10\13\0\7\10\1\0\1\60\2\0\25\60\1\107"+
    "\22\60\1\61\2\0\26\61\1\110\21\61\4\0\2\10"+
    "\1\111\10\10\1\0\1\10\1\0\6\10\13\0\7\10"+
    "\5\0\13\10\1\0\1\10\1\0\1\112\5\10\13\0"+
    "\7\10\5\0\1\73\1\74\1\113\2\0\6\74\1\0"+
    "\1\74\4\0\1\74\21\0\1\74\7\0\2\114\1\113"+
    "\2\0\6\114\1\0\1\114\4\0\1\114\21\0\1\114"+
    "\7\0\1\115\1\37\1\72\3\0\3\115\1\46\1\47"+
    "\1\50\1\51\36\0\1\116\1\37\1\72\3\0\3\116"+
    "\1\46\1\47\1\50\1\51\36\0\2\77\4\0\3\77"+
    "\1\46\1\47\40\0\2\77\4\0\3\77\42\0\13\10"+
    "\1\0\1\117\1\0\6\10\13\0\7\10\5\0\13\10"+
    "\1\0\1\10\1\0\6\10\13\0\6\10\1\120\5\0"+
    "\3\10\1\105\7\10\1\0\1\10\1\0\6\10\13\0"+
    "\7\10\5\0\13\10\1\0\1\10\1\0\3\10\1\121"+
    "\2\10\13\0\7\10\5\0\13\10\1\0\1\122\1\0"+
    "\6\10\13\0\7\10\31\0\1\123\53\0\1\124\25\0"+
    "\2\10\1\125\10\10\1\0\1\10\1\0\6\10\13\0"+
    "\7\10\5\0\13\10\1\0\1\10\1\0\6\10\13\0"+
    "\7\10\1\126\4\0\2\127\1\113\2\0\6\127\1\0"+
    "\1\127\4\0\1\127\21\0\1\127\7\0\1\130\1\37"+
    "\1\72\3\0\3\130\1\46\1\47\1\50\1\51\36\0"+
    "\1\131\1\37\1\72\3\0\3\131\1\46\1\47\1\50"+
    "\1\51\36\0\13\10\1\0\1\132\1\0\6\10\13\0"+
    "\7\10\5\0\13\10\1\0\1\10\1\0\6\10\13\0"+
    "\5\10\1\133\1\10\12\0\1\134\45\0\2\135\1\113"+
    "\2\0\6\135\1\0\1\135\4\0\1\135\21\0\1\135"+
    "\7\0\1\136\1\37\1\72\3\0\3\136\1\46\1\47"+
    "\1\50\1\51\36\0\1\137\1\37\1\72\3\0\3\137"+
    "\1\46\1\47\1\50\1\51\36\0\13\10\1\0\1\140"+
    "\1\0\6\10\13\0\7\10\5\0\13\10\1\0\1\141"+
    "\1\0\6\10\13\0\7\10\21\0\1\142\36\0\2\143"+
    "\1\113\2\0\6\143\1\0\1\143\4\0\1\143\21\0"+
    "\1\143\7\0\1\144\1\37\1\72\3\0\3\144\1\46"+
    "\1\47\1\50\1\51\36\0\1\145\1\37\1\72\3\0"+
    "\3\145\1\46\1\47\1\50\1\51\36\0\13\10\1\0"+
    "\1\10\1\0\6\10\13\0\1\146\6\10\23\0\1\147"+
    "\34\0\2\150\1\113\2\0\6\150\1\0\1\150\4\0"+
    "\1\150\21\0\1\150\7\0\1\151\1\37\1\72\3\0"+
    "\3\151\1\46\1\47\1\50\1\51\36\0\1\152\1\37"+
    "\1\72\3\0\3\152\1\46\1\47\1\50\1\51\103\0"+
    "\1\153\5\0\2\154\1\113\2\0\6\154\1\0\1\154"+
    "\4\0\1\154\21\0\1\154\7\0\1\155\1\37\1\72"+
    "\3\0\3\155\1\46\1\47\1\50\1\51\36\0\1\156"+
    "\1\37\1\72\3\0\3\156\1\46\1\47\1\50\1\51"+
    "\52\0\1\157\36\0\2\160\1\113\2\0\6\160\1\0"+
    "\1\160\4\0\1\160\21\0\1\160\7\0\1\161\1\37"+
    "\1\72\3\0\3\161\1\46\1\47\1\50\1\51\36\0"+
    "\1\162\1\37\1\72\3\0\3\162\1\46\1\47\1\50"+
    "\1\51\52\0\1\163\36\0\2\164\1\113\2\0\6\164"+
    "\1\0\1\164\4\0\1\164\21\0\1\164\7\0\1\165"+
    "\1\37\1\72\3\0\3\165\1\46\1\47\1\50\1\51"+
    "\36\0\1\166\1\37\1\72\3\0\3\166\1\46\1\47"+
    "\1\50\1\51\75\0\1\167\13\0\2\170\1\113\2\0"+
    "\6\170\1\0\1\170\4\0\1\170\21\0\1\170\7\0"+
    "\1\171\1\37\1\72\3\0\3\171\1\46\1\47\1\50"+
    "\1\51\36\0\1\172\1\37\1\72\3\0\3\172\1\46"+
    "\1\47\1\50\1\51\36\0\2\173\1\113\2\0\6\173"+
    "\1\0\1\173\4\0\1\173\21\0\1\173\7\0\1\174"+
    "\1\37\1\72\3\0\3\174\1\46\1\47\1\50\1\51"+
    "\36\0\1\175\1\37\1\72\3\0\3\175\1\46\1\47"+
    "\1\50\1\51\36\0\2\176\1\113\2\0\6\176\1\0"+
    "\1\176\4\0\1\176\21\0\1\176\7\0\1\177\1\37"+
    "\1\72\3\0\3\177\1\46\1\47\1\50\1\51\36\0"+
    "\1\200\1\37\1\72\3\0\3\200\1\46\1\47\1\50"+
    "\1\51\36\0\2\201\1\113\2\0\6\201\1\0\1\201"+
    "\4\0\1\201\21\0\1\201\7\0\1\202\1\37\1\72"+
    "\3\0\3\202\1\46\1\47\1\50\1\51\36\0\1\203"+
    "\1\37\1\72\3\0\3\203\1\46\1\47\1\50\1\51"+
    "\36\0\2\204\1\113\2\0\6\204\1\0\1\204\4\0"+
    "\1\204\21\0\1\204\7\0\1\205\1\37\1\72\3\0"+
    "\3\205\1\46\1\47\1\50\1\51\36\0\1\206\1\37"+
    "\1\72\3\0\3\206\1\46\1\47\1\50\1\51\36\0"+
    "\2\207\1\113\2\0\6\207\1\0\1\207\4\0\1\207"+
    "\21\0\1\207\7\0\1\210\1\37\1\72\3\0\3\210"+
    "\1\46\1\47\1\50\1\51\36\0\1\211\1\37\1\72"+
    "\3\0\3\211\1\46\1\47\1\50\1\51\36\0\2\212"+
    "\1\113\2\0\6\212\1\0\1\212\4\0\1\212\21\0"+
    "\1\212\7\0\1\213\1\37\1\72\3\0\3\213\1\46"+
    "\1\47\1\50\1\51\40\0\1\113\50\0\1\214\1\37"+
    "\1\72\3\0\3\214\1\46\1\47\1\50\1\51\36\0"+
    "\1\215\1\37\1\72\3\0\3\215\1\46\1\47\1\50"+
    "\1\51\36\0\1\216\1\37\1\72\3\0\3\216\1\46"+
    "\1\47\1\50\1\51\36\0\1\217\1\37\1\72\3\0"+
    "\3\217\1\46\1\47\1\50\1\51\36\0\2\37\1\72"+
    "\3\0\3\37\1\46\1\47\1\50\1\51\32\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     1,  9,  1,  9,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1, 
     1,  9,  9,  9,  9,  9,  9,  1,  1,  9,  1,  1,  1,  1,  1,  9, 
     9,  0,  1,  1,  1,  9,  9,  1,  0,  1,  1,  1,  1,  1,  1,  0, 
     0,  9,  9,  9,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1,  0, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  1,  1,  1,  1,  1, 
     1,  1,  0,  0,  1,  0,  1,  1,  1,  1,  1,  0,  1,  1,  1,  1, 
     1,  0,  1,  1,  1,  1,  0,  1,  1,  1,  0,  1,  1,  1,  0,  1, 
     1,  1,  0,  0,  1,  1,  9,  0,  1,  1,  0,  1,  1,  0,  1,  1, 
     0,  1,  1,  0,  1,  1,  0,  1,  1,  0,  1,  1,  1,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
    /* To create a new java_cup.runtime.Symbol with information about
       the current token, the token will have no value in this
       case. */
    private Symbol symbol(int type) {
      return new Symbol(type, yyline, yycolumn);
    }
    
    /* Also creates a new java_cup.runtime.Symbol with information
       about the current token, but this object has a value. */
    private Symbol symbol(int type, Object value) {
      return new Symbol(type, yyline, yycolumn, value);
    }

  /* assumes correct representation of a long value for 
     specified radix in String s */
  private long parseLong(String s, int radix) {
    return Long.valueOf(s,radix).longValue();
  }

  /** Constructor called by the <code>Selector</code> class. */
  Lexer(String in) {
    this(new java.io.StringReader(in));
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[4816];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1668) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Gets the next input character.
   *
   * @return      the next character of the input stream, EOF if the
   *              end of the stream is reached.
   * @exception   IOException  if any I/O-Error occurs
   */
  private int yy_advance() throws java.io.IOException {

    /* standard case */
    if (yy_currentPos < yy_endRead) return yy_buffer[yy_currentPos++];

    /* if the eof is reached, we don't need to work hard */ 
    if (yy_atEOF) return YYEOF;

    /* otherwise: need to refill the buffer */

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if ( numRead == -1 ) return YYEOF;

    yy_endRead+= numRead;

    return yy_buffer[yy_currentPos++];
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;


    while (true) {

      boolean yy_r = false;
      for (yy_currentPos = yy_startRead; yy_currentPos < yy_markedPos;
                                                      yy_currentPos++) {
        switch (yy_buffer[yy_currentPos]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        if ( yy_advance() == '\n' ) yyline--;
        if ( !yy_atEOF ) yy_currentPos--;
      }

      yy_action = -1;

      yy_currentPos = yy_startRead = yy_markedPos;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          yy_input = yy_advance();

          if ( yy_input == YYEOF ) break yy_forAction;

          int yy_next = yytrans[ yy_rowMap[yy_state] + yycmap[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = YY_ATTRIBUTE[yy_state];
          if ( (yy_attributes & 1) > 0 ) {
            yy_action = yy_state; 
            yy_markedPos = yy_currentPos; 
            if ( (yy_attributes & 8) > 0 ) break yy_forAction;
          }

        }
      }


      switch (yy_action) {

        case 0: 
        case 70: 
        case 71: 
          {  return symbol(sym.STRING, new String(yytext())); }
        case 144: break;
        case 118: 
          {  return symbol(sym.NOTBETWEEN);  }
        case 145: break;
        case 101: 
          {  return symbol(sym.BETWEEN);  }
        case 146: break;
        case 96: 
          {  return symbol(sym.ESCAPE);  }
        case 147: break;
        case 30: 
        case 39: 
        case 62: 
        case 136: 
        case 138: 
        case 139: 
        case 140: 
        case 141: 
        case 142: 
          {  return symbol(sym.DOUBLE, new Double(yytext()));  }
        case 148: break;
        case 29: 
        case 34: 
        case 35: 
        case 36: 
        case 60: 
        case 61: 
        case 76: 
        case 77: 
        case 87: 
        case 88: 
        case 93: 
        case 94: 
        case 99: 
        case 100: 
        case 104: 
        case 105: 
        case 108: 
        case 109: 
        case 112: 
        case 113: 
        case 116: 
        case 117: 
        case 120: 
        case 121: 
        case 123: 
        case 124: 
        case 126: 
        case 127: 
        case 129: 
        case 130: 
        case 132: 
        case 133: 
        case 135: 
          {  return symbol(sym.INT, new Integer((int) parseLong(yytext(),8)));  }
        case 149: break;
        case 25: 
          {  return symbol(sym.COMMA);  }
        case 150: break;
        case 24: 
          {  return symbol(sym.GT);  }
        case 151: break;
        case 23: 
          {  return symbol(sym.LT);  }
        case 152: break;
        case 22: 
          {  return symbol(sym.EQ);  }
        case 153: break;
        case 21: 
          {  return symbol(sym.RPAREN);  }
        case 154: break;
        case 20: 
          {  return symbol(sym.LPAREN);  }
        case 155: break;
        case 19: 
          {  return symbol(sym.DIVIDE);  }
        case 156: break;
        case 1: 
        case 10: 
        case 15: 
        case 16: 
          {  throw new Error("Illegal character <"+yytext()+"> at line "+yyline+", column "+yycolumn);  }
        case 157: break;
        case 2: 
        case 3: 
          {  /* just skip what was found, do nothing */  }
        case 158: break;
        case 4: 
        case 5: 
          {  return symbol(sym.INT, new Integer(yytext()));  }
        case 159: break;
        case 6: 
        case 7: 
        case 8: 
        case 9: 
        case 11: 
        case 13: 
        case 14: 
        case 26: 
        case 27: 
        case 28: 
        case 41: 
        case 42: 
        case 43: 
        case 44: 
        case 45: 
        case 46: 
        case 52: 
        case 53: 
        case 64: 
        case 65: 
        case 66: 
        case 67: 
        case 68: 
        case 72: 
        case 79: 
        case 80: 
        case 89: 
        case 90: 
        case 95: 
          {  return symbol(sym.ID, yytext());  }
        case 160: break;
        case 12: 
          {  return symbol(sym.MINUS);  }
        case 161: break;
        case 17: 
          {  return symbol(sym.PLUS);  }
        case 162: break;
        case 18: 
          {  return symbol(sym.TIMES);  }
        case 163: break;
        case 31: 
          {  if ((yytext().substring(0,yylength()-1)).equals((Long.MIN_VALUE+"").substring(1,yylength())))
                              return symbol(sym.MIN_LONG, new Long(Long.MIN_VALUE));
                            return symbol(sym.LONG, new Long(yytext().substring(0,yylength()-1))); 
                           }
        case 164: break;
        case 32: 
          {  return symbol(sym.SHORT, new Short(yytext().substring(0,yylength()-1)));  }
        case 165: break;
        case 37: 
          {  return symbol(sym.FLOAT, new Float(yytext()));  }
        case 166: break;
        case 38: 
          {  return symbol(sym.DOUBLE, new Double(yytext().substring(0,yylength()-1)));  }
        case 167: break;
        case 49: 
          {  return symbol(sym.LE);  }
        case 168: break;
        case 50: 
          {  return symbol(sym.NEQ);  }
        case 169: break;
        case 51: 
          {  return symbol(sym.GE);  }
        case 170: break;
        case 54: 
          {  return symbol(sym.OR);  }
        case 171: break;
        case 55: 
          {  return symbol(sym.IS);  }
        case 172: break;
        case 56: 
          {  return symbol(sym.IN);  }
        case 173: break;
        case 57: 
          {  return symbol(sym.LONG, new Long(parseLong(yytext().substring(0,yylength()-1),8)));  }
        case 174: break;
        case 58: 
        case 59: 
        case 75: 
        case 86: 
        case 92: 
        case 98: 
        case 103: 
        case 107: 
        case 111: 
          {  return symbol(sym.INT, new Integer((int) parseLong(yytext().substring(2),16)));  }
        case 175: break;
        case 69: 
          {  return symbol(sym.AND);  }
        case 176: break;
        case 73: 
          {  return symbol(sym.NOT);  }
        case 177: break;
        case 74: 
          {  return symbol(sym.LONG, new Long(parseLong(yytext().substring(2,yylength()-1),16)));  }
        case 178: break;
        case 78: 
          {  return symbol(sym.LIKE);  }
        case 179: break;
        case 81: 
          {  return symbol(sym.BOOLEAN, new Boolean(yytext()));  }
        case 180: break;
        case 84: 
          {  return symbol(sym.NULL);  }
        case 181: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          }
        yy_ScanError(YY_NO_MATCH);
      }
    }
  }


}
