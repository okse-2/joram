<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>

<!DOCTYPE document SYSTEM '../../common/dtd/objectweb.dtd'>

<document>
  <properties>
    <author email="joram-team@objectweb.org">joram-team</author>
    <title>Home page</title>
    <filename>index.xml</filename>
    <pathtoroot>.</pathtoroot>
  </properties>

  <body>

    <s1 name="Recent news">

      <subtitle>December 11th, 2002: a new JORAM version tagged 3_3_0 is
      available in the CVS distribution.</subtitle>
      <p>This new version provides a refactored <em>administration</em> 
      protocol. Administration is now based on JMS communication and is much
      more flexible than the past implementation. Hopefully it will make
      contributing easier; JORAM's administration still misses graphical tools
      and JMX support, and any contribution would be highly appreciated.
      </p>
      <p>This new administration implementation comes with a new administration
      interface. Old administration codes should go on working even if they now
      use deprecated methods. 
      </p>
      <p>Check the <a href="doc/index.html">available documentation</a> for
      the new JORAM tutorial and the samples for new administration code
      examples.
      </p>
      <hr />

      <subtitle>October 21st, 2002: JORAM 3.2 provides new features!</subtitle>
      <p>The main added values of Joram 3.2.0 are the new implementations of
         <em>hierarchical topics</em> and <em>dead message queues</em>.
      </p>
      <p>According to the JMS specification, topics might have a hierarchical
         structure allowing clients to subscribe or publish to given subtopics.
         Joram's fully distributed structure allows a topic hierarchy to be
         spread over many servers.
      </p>
      <p>A dead message queue is a destination getting undeliverable messages.
         Messages might be considered undeliverable because they expired 
         before delivery, because they were sent on a non accessible
         destination or because they are constantly denied when consumed.
      </p>
      <p>This new version also provides a <em>flow control mechanism</em> in
         order to prevent a Joram platform to be overloaded by a heavily
         producing client.
      </p>
      <p><em>Bugs</em> have also been corrected: check the
         <a href="dev/versions.html">versions info</a> page.
      </p> 
      <hr />

      <subtitle>June 18th, 2002: JMS Test Suite tests for JMS 1.1 support!
                </subtitle>
      <p>The <em>JMS Test Suite</em> has its own
         <a href="tests/index.html">page</a>.<br />
	 The suite tests JMS features. All code of the test suite is
	 pure JMS without any dependency to JORAM.
     </p>
      
      <hr />

     <subtitle>June 10th, 2002: JORAM now implements the new JMS 1.1
        specification!</subtitle>
      <p><em>Joram 3.1.0 fully implements JMS 1.1</em> providing unified
        messaging interfaces for the Point-to-Point and Pub/Sub
        domains. In the previous versions of Joram and JMS, the
        client programming model made a strong distinction between
        these two domains. Now, the domain unification simplifies
        the model and allows to include PTP and Pub/Sub messaging in
        a same transaction.</p>
      <p>No need to modify existing applications: code written for
        the previous Joram and JMS versions will work as is with
        these new versions.</p>
      
    </s1>

    <s1 name="JORAM: Java (TM) Open Reliable Asynchronous Messaging">

      <table border="0">
	<tr>
	  <td><img src="images/joram.jpg" alt="JORAM logo" height="132" width="287" border="0" hspace="2"/></td>
	  <td valign="middle">Current release: 3.2.0</td>
	</tr>
      </table>
      
      <p><strong>JORAM</strong> incorporates a 100% pure Java
      implementation of <em>JMS</em> (Java Message Service API
      released by Sun Microsystem, Inc.). It provides access to a MOM
      (Message Oriented Middleware), built on top of the <a
      href="http://www.scalagent.com/">ScalAgent</a> agents based
      distributed platform. JORAM is a <em>free</em>, <em>open
      source</em> initiative.</p>

      <s2 name="Specification">

        <p>JORAM provides full support to <em>JMS 1.1</em>:</p>
        <ul>
          <li>Unified interfaces for the Point-to-Point (PTP) and
            Publish/Subscribe (Pub/Sub) messaging models</li>
          <li><em>AND</em> still the semantically specific PTP and Pub/Sub
            interfaces</li>
          <li>Full backward compatibility with JMS 1.0.2b compliant
            applications</li>
          <li>Hierarchical topics</li>
          <li>Message selection</li>
          <li>Plus a timer for pending transacted sessions</li>
          <li>"Clusterizable" topics</li>
          <li>Configurable dead message queue feature</li>
          <li>Plus a "light" JNDI 1.1.2 implementation</li>
        </ul>

        <p>JORAM also implements the ASF interfaces and methods for
          performing JMS operations through an application server, and
          is integrated to <a
            href="http://www.objectweb.org/jonas/">JOnAS</a> EJB 
	  platform.</p>
      </s2>

      <s2 name="Getting involved">
	
	<p>Any input or personal view for improving and/or developing
	JORAM is welcome. JORAM, as an <em>open source</em> project,
	also welcomes <em>external contributions</em>. Interested?
	Contact <a
	href="mailto:joram-team@objectweb.org">us</a>.</p>

      </s2>  
    </s1>
    
  </body>

</document>
