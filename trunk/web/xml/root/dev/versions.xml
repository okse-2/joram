<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>

<!DOCTYPE document SYSTEM '../../../common/dtd/objectweb.dtd'>

<document>
  <properties>
    <author email="joram-team@objectweb.org">joram-team</author>
    <title>Releases info</title>
    <filename>versions.xml</filename>
    <pathtoroot>..</pathtoroot>
  </properties>

  <body>
    <s1 name="joram CVS version, no tag">
      <p>Getting Joram through CVS without specifying a tag allows to get
      the latest tagged version with small corrections and updates.</p>
      <s2 name="Modifications (latest: May 2003, 5th)">
      <ul>
      <li>Following
      <a href="http://www.objectweb.org/wws/arc/joram/2003-05/msg00014.html">
      Huey-Siang Kam's</a> feedback, a bug in Joram's administration has been
      corrected: it was not possible, with the
      <code>AdminItf.updateUser()</code> method to only update a user's password,
      rather than both its name and password. Now, it is. The impacted class is
      <code>AdminTopicImpl</code> in the <code>fr.dyade.aaa.mom.dest</code>
      package.</li>
      <li>Following
      <a href="http://www.objectweb.org/wws/arc/joram/2003-05/msg00000.html">
      Knut's</a> feedback, the setting of JNDI's URL has evolved:
      <code>java.naming.provider.url</code> might be set 
      as <code>host:port</code> and not only as <code>joram://host:port</code>.
      The impacted class is <code>NamingContextFactory</code> in the
      <code>fr.dyade.aaa.jndi2.client</code> package.</li>
      <li>Bug in serial sending of a message with a transacted session:
      clearing an already sent (but not commited) message's properties,
      was actually clearing the properties (instead of clearing only the
      properties for the sending to come). The impacted class is
      <code>Message</code> in the <code>fr.dyade.aaa.mom.messages</code>
      package.</li>
      <li>Following 
      <a href="http://www.objectweb.org/wws/arc/joram/2003-04/msg00016.html">
      Doug's</a> feedback, a JNDI bug has been corrected: serializable objects
      may now be bound in a server
      without the need for the server to "know" the objects' classes. The
      following packages should be updated: <code>fr.dyade.aaa.agent</code>,
      <code>fr.dyade.aaa.ip</code>, <code>fr.dyade.aaa.jndi2</code>.</li>
      </ul>
      </s2>
    </s1>
    <s1 name="joram3_4_1">
      <p>This version is a maintenance version of the 3.4.0 release. It has
      been tagged for allowing the integration of an up-to-date Joram into
      JOnAS.</p>
      <s2 name="Modifications">
      <ul>
      <li><code>NGNetwork</code> class removed from
      <code>fr.dyade.aaa.agent</code> package for allowing compilation
      with jdk1.3.</li>
      <li>Bug corrected in the <code>fr.dyade.aaa.mom.proxies.ProxyImpl</code>
      class and concerning XA rollbacks.</li>
      </ul>
      </s2>
    </s1>
    <s1 name="joram3_4_0"> 
      <s2 name="Support of SOAP as a client/server communication protocol">
      <p>This version is only available in CVS with tag joram3_4_0. So far, 
      Joram provided a TCP link between its clients and servers. Now,
      it also provides a SOAP link, based on HTTP and XML.</p>
     
      <p>For more info on SOAP, check
      <a href="http://www.w3.org/TR/SOAP">W3C's SOAP</a> site.
      </p>

      <p>The support of the SOAP protocol led to re-architecturing 
      the server side proxies (fr.dyade.aaa.mom.proxies) and client side
      connection classes (fr.dyade.aaa.joram.Connection,
      fr.dyade.aaa.joram.Driver, fr.dyade.aaa.joram.tcp,
      fr.dyade.aaa.joram.soap).</p>

      <p><a href="../doc/index.html">Documentation</a> is available, samples
      have been added for testing. Testing requires the use of a servlet
      container such as Apache's <a href="http://jakarta.apache.org/tomcat/">
      Tomcat</a>.</p>
      </s2>
    </s1>

    <s1 name="joram3_3_1"> 
      <s2 name="Maintenance release of joram3_3_0">
      <p>This version comes as packages and is tagged joram3_3_1 in CVS. It
      is similar to the joram3_3_0 version except that it corrects a few bugs.
      </p>
      </s2>
      <s2 name="Corrected bugs">
      <ul>
      <li>Non serializable ConnectionFactory objects, found by
      <a href="http://www.objectweb.org/wws/arc/joram/2003-02/msg00027.html">
      Tony Thompson</a>. FactoryConfiguration and JoramUrl classes were not
      serializable and thus, the serialization of a ConnectionFactory instance
      would fail.</li>
      <li>Bug in fr.dyade.aaa.agent.A3CMLDomain, found by
      <a href="http://www.objectweb.org/wws/arc/joram/2003-02/msg00035.html">
      Tony Thompson</a>. Launching an AgentServer with no DTD could not work.
      </li>
      </ul>
      </s2>
    </s1>
    <s1 name="joram3_3_0">
      <s2 name="New administration protocol">
      <p>This version of JORAM includes a totally refactored administration
      protocol. Administration is now based on JMS communication and is much
      more flexible than the past implementation. The new administration
      implementation comes with a new administration interface. Old
      administration codes should go on working even if they now use
      deprecated methods. </p>
      </s2>
      <s2 name="Corrected bugs">
      <ul>
      <li>Timeout in MessageConsumer.receive not compliant, found by
          <a href="http://www.objectweb.org/wws/arc/joram/2002-11/msg00018.html">
          Gerald Schroeder</a>.
          A MessageConsumer.receive(timeOut) would not return if the connection
          it belongs to was in stopped mode, even if the timer expired.
      </li>
      <li>Incorrect behaviour of temporary destinations, found by
          <a href="http://www.objectweb.org/wws/arc/joram/2002-10/msg00011.html">
          Armin Schieber</a>.
          A client building a temporary destination from the 
          Message.getJMSReplyTo() method was able to consume messages from
          the temporary destination, and also to delete it, even if it did
          not belong to the connection which actually created the temporary
          destination. Also, it was not possible to retrieve a temporary
          destination binded in JNDI.
      </li>
      </ul>
      </s2>
    </s1>

    <s1 name="joram3_2_0">
      <s2 name="New features">
      <ul>
      <li>A dead message queue is a destination getting undeliverable messages.
          Messages might be considered undeliverable because they expired
          before delivery, because they were sent on a non accessible
          destination or because they are constantly denied when consumed. 
      </li>
      <li>According to the JMS specification, topics might have a hierarchical
          structure allowing clients to subscribe or publish to given
          subtopics. Joram's fully distributed structure allows a topic
          hierarchy to be spread over many servers.</li>
      </ul>
      </s2>
      <s2 name="Enhancements">
      <p>In order to prevent a Joram platform to be overloaded by a heavily
         producing client, a flow control mechanism has been added.</p>
      </s2>
      <s2 name="Corrected bugs">
      <ul>
      <li>Timeout in MessageConsumer.receive not compliant, found by
          <a href="http://www.objectweb.org/wws/arc/joram/2002-09/msg00003.html">
          Gerald Schroeder</a>.
          A MessageConsumer.receive(0) behaved as a receiveNoWait() instead
          of behaving as a receive() (by waiting indefinitely for a message).</li>
      <li>Listener not active if set after its connection was started, found by
          Gerald Schroeder.
          When setting a listener on a consumer belonging to a connection already
          started, the session thread for distributing the asynchronous deliveries
          was actually never started.</li>
      <li>Connection not properly closed when failing, found by
          <a href="http://www.objectweb.org/wws/arc/joram/2002-08/msg00036.html">
          Roy</a>.
          In the case of a connection failure, the related Connection object and
          its resources were not properly closed.</li>
      <li>Incorrect BytesMessage and StreamMessage implementations, found by
          <a href="http://www.objectweb.org/wws/arc/joram/2002-07/msg00021.html">
          Mark Trumpler</a>.
          BytesMessage and StreamMessage were wrongly behaving in the case of
          multiple sendings, modified or not. Also, their readBytes(...)
          methods were wrong.</li>
      <li>Messages never delivered in the case of an incorrect listener
          removal, found by
          <a href="http://www.objectweb.org/wws/arc/joram/2002-07/msg00012.html">
          Gerald Schroeder</a>.
          When a listener is removed client side (by calling
          setMessageListener(null)), messages that reach the connection are
          denied. However, if the connection is stopped, the message were
          stored server side until it was started again. If the connection was
          never started, and also never closed, the messages were kept there
          for ever, and thus never delivered.</li>
      <li>MessageProducers synchronized with the destinations, found by
          <a href="http://www.objectweb.org/wws/arc/joram/2002-06/msg00024.html">
          Jan Kester</a>.
          This incorrect behaviour was encountered in distributed
          configurations, when a producer client was connected to a server and
          produced a message destinated to a destination located on an other
          server. If this latest server was down, the producer would block
          because of a synchronous call to the destination to check the access
          permission of the producer.</li>
      </ul>
      </s2>
    </s1>

  </body>

</document>
