<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>

<!DOCTYPE document SYSTEM '../../../common/dtd/objectweb.dtd'>

<document>
  <properties>
    <author email="joram-team@objectweb.org">joram-team</author>
    <title>Version information</title>
    <filename>versions.xml</filename>
    <pathtoroot>..</pathtoroot>
  </properties>

  <body>

    <s1 name="Information on the current version">
      <s2 name="New features">
      <ul>
      <li>A dead message queue is a destination getting undeliverable messages.
          Messages might be considered undeliverable because they expired
          before delivery, because they were sent on a non accessible
          destination or because they are constantly denied when consumed. 
      </li>
      <li>According to the JMS specification, topics might have a hierarchical
          structure allowing clients to subscribe or publish to given
          subtopics. Joram's fully distributed structure allows a topic
          hierarchy to be spread over many servers.</li>
      </ul>
      </s2>
      <s2 name="Enhancements">
      <p>In order to prevent a Joram platform to be overloaded by a heavily
         producing client, a flow control mechanism has been added.</p>
      </s2>
      <s2 name="Corrected bugs">
      <ul>
      <li>Timeout in MessageConsumer.receive not compliant, found by
          <a href="http://www.objectweb.org/wws/arc/joram/2002-09/msg00003.html">
          Gerald Schröder</a>.
          A MessageConsumer.receive(0) behaved as a receiveNoWait() instead
          of behaving as a receive() (by waiting indefinitely for a message).</li>
      <li>Listener not active if set after its connection was started, found by
          Gerald Schröder.
          When setting a listener on a consumer belonging to a connection already
          started, the session thread for distributing the asynchronous deliveries
          was actually never started.</li>
      <li>Connection not properly closed when failing, found by
          <a href="http://www.objectweb.org/wws/arc/joram/2002-08/msg00036.html">
          Roy</a>.
          In the case of a connection failure, the related Connection object and
          its resources were not properly closed.</li>
      <li>Incorrect BytesMessage and StreamMessage implementations, found by
          <a href="http://www.objectweb.org/wws/arc/joram/2002-07/msg00021.html">
          Mark Trumpler</a>.
          BytesMessage and StreamMessage were wrongly behaving in the case of
          multiple sendings, modified or not. Also, their readBytes(...)
          methods were wrong.</li>
      <li>Messages never delivered in the case of an incorrect listener
          removal, found by
          <a href="http://www.objectweb.org/wws/arc/joram/2002-07/msg00012.html">
          Gerald Schröder</a>.
          When a listener is removed client side (by calling
          setMessageListener(null)), messages that reach the connection are
          denied. However, if the connection is stopped, the message were
          stored server side until it was started again. If the connection was
          never started, and also never closed, the messages were kept there
          for ever, and thus never delivered.</li>
      <li>MessageProducers synchronized with the destinations, found by
          <a href="http://www.objectweb.org/wws/arc/joram/2002-06/msg00024.html">
          Jan Kester</a>.
          This incorrect behaviour was encountered in distributed
          configurations, when a producer client was connected to a server and
          produced a message destinated to a destination located on an other
          server. If this latest server was down, the producer would block
          because of a synchronous call to the destination to check the access
          permission of the producer.</li>
      </ul>
      </s2>

      <s2 name="Identified bugs (oops!)">
      <ul>
      <li>Incorrect behaviour of temporary destinations, found by
          <a href="http://www.objectweb.org/wws/arc/joram/2002-10/msg00011.html">
          Armin Schieber</a>.
          A client building a temporary destination from the 
          Message.getJMSReplyTo() method was able to consume messages from
          the temporary destination, and also to delete it, even if it did
          not belong to the connection which actually created the temporary
          destination. Also, it was not possible to retrieve a temporary
          destination binded in JNDI. These bugs have been corrected. The
          impacted classes (Connection, Message, MessageConsumer,
          ObjectFactory, TemporaryQueue, TemporaryTopic in 
          fr.dyade.aaa.joram) are available in the CVS distribution.</li>
      </ul>
      </s2>
    </s1>

    <s1 name="Informations on JORAM 3.3">

      <s2 name="New administration protocol">
      <ul>
      <li>This version of JORAM includes a totally refactored administration
      protocol. Administration is now based on JMS communication and is much
      more flexible than the past implementation. The new administration
      implementation comes with a new administration interface. Old
      administration codes should go on working even if they now use
      deprecated methods. 
      </li>
      </ul>
      </s2>
      <s2 name="Corrected bugs">
      <ul>
      <li>Timeout in MessageConsumer.receive not compliant, found by
          <a href="http://www.objectweb.org/wws/arc/joram/2002-11/msg00018.html">
          Gerald Schröder</a>.
          A MessageConsumer.receive(timeOut) would not return if the connection
          it belongs to was in stopped mode, even if the timer expired.
      </li>
      </ul>
      </s2>
    </s1>

  </body>

</document>
