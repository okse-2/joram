/*
 * Copyright (C) 1996 - 2001 BULL
 * Copyright (C) 1996 - 2001 INRIA
 *
 * The contents of this file are subject to the Joram Public License,
 * as defined by the file JORAM_LICENSE.TXT 
 * 
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License on the Objectweb web site
 * (www.objectweb.org). 
 * 
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for
 * the specific terms governing rights and limitations under the License. 
 * 
 * The Original Code is Joram, including the java packages fr.dyade.aaa.agent,
 * fr.dyade.aaa.util, fr.dyade.aaa.ip, fr.dyade.aaa.mom, fr.dyade.aaa.jndi 
 * and fr.dyade.aaa.joram, released October, 2001. 
 * 
 * The Initial Developer of the Original Code is Dyade. The Original Code and
 * portions created by Dyade are Copyright Bull and Copyright INRIA.
 * All Rights Reserved.
 */
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Fri Sep 07 11:08:47 CEST 2001
//----------------------------------------------------

package fr.dyade.aaa.mom.selectors;

import fr.dyade.aaa.mom.Message;

/** Cup generated class to encapsulate user supplied action code.*/
public class CUPparseractions {
  private final parser parser;
  private Message message;

  /** Constructor */
  CUPparseractions(parser parser) {
    this.parser = parser;
  }

  CUPparseractions(parser parser, Message message) {
    this.parser = parser;
    this.message = message;
  }

  /** Method with the actual generated action code. */
  public final Symbol CUPparserdo_action(
    int                        CUPparseract_num,
    lr_parser CUPparserparser,
    java.util.Stack            CUPparserstack,
    int                        CUPparsertop)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      Symbol CUPparserresult;

      /* select the action based on the action number */
      switch (CUPparseract_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lit_expr ::= BOOLEAN 
            {
              Object RESULT = null;
		int boolleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int boolright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Boolean bool = (Boolean)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  RESULT = bool;
                
              CUPparserresult = new Symbol(5/*lit_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lit_expr ::= STRING 
            {
              Object RESULT = null;
		int stleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int stright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		String st = (String)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  RESULT = st.substring(1, st.length() - 1);
                
              CUPparserresult = new Symbol(5/*lit_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lit_expr ::= DOUBLE 
            {
              Object RESULT = null;
		int dbleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int dbright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Double db = (Double)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  RESULT = db;
                
              CUPparserresult = new Symbol(5/*lit_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lit_expr ::= ID 
            {
              Object RESULT = null;
		int idleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int idright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		String id = (String)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  RESULT = message.getProp(id);
                
              CUPparserresult = new Symbol(5/*lit_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lit_expr ::= LPAREN expr RPAREN 
            {
              Object RESULT = null;
		int eleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-1)).left;
		int eright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-1)).right;
		Object e = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-1)).value;
		
                  RESULT = e;
                
              CUPparserresult = new Symbol(5/*lit_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= lit_expr 
            {
              Object RESULT = null;
		int litleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int litright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Object lit = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  RESULT = lit;
                
              CUPparserresult = new Symbol(4/*expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= MINUS expr 
            {
              Object RESULT = null;
		int eleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int eright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Object e = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (e instanceof Double)
                    RESULT = (Double) e;
                  else
                    RESULT = null;
                
              CUPparserresult = new Symbol(4/*expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-1)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= PLUS expr 
            {
              Object RESULT = null;
		int eleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int eright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Object e = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (e instanceof Double)
                    RESULT = (Double) e;
                  else
                    RESULT = null;
                
              CUPparserresult = new Symbol(4/*expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-1)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr DIVIDE expr 
            {
              Object RESULT = null;
		int e1left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left;
		int e1right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).right;
		Object e1 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-2)).value;
		int e2left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int e2right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Object e2 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (e1 instanceof Double && e2 instanceof Double)
                    RESULT = new Double(
                      ((Double) e1).doubleValue() / ((Double) e2).doubleValue()
                    );
                  else
                    RESULT = null;
                
              CUPparserresult = new Symbol(4/*expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr TIMES expr 
            {
              Object RESULT = null;
		int e1left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left;
		int e1right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).right;
		Object e1 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-2)).value;
		int e2left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int e2right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Object e2 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (e1 instanceof Double && e2 instanceof Double)
                    RESULT = new Double(
                      ((Double) e1).doubleValue() * ((Double) e2).doubleValue()
                    );
                  else
                    RESULT = null;
                
              CUPparserresult = new Symbol(4/*expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr MINUS expr 
            {
              Object RESULT = null;
		int e1left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left;
		int e1right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).right;
		Object e1 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-2)).value;
		int e2left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int e2right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Object e2 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (e1 instanceof Double && e2 instanceof Double)
                    RESULT = new Double(
                      ((Double) e1).doubleValue() - ((Double) e2).doubleValue()
                    );
                  else
                    RESULT = null;
                
              CUPparserresult = new Symbol(4/*expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr PLUS expr 
            {
              Object RESULT = null;
		int e1left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left;
		int e1right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).right;
		Object e1 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-2)).value;
		int e2left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int e2right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Object e2 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (e1 instanceof Double && e2 instanceof Double)
                    RESULT = new Double(
                      ((Double) e1).doubleValue() + ((Double) e2).doubleValue()
                    );
                  else
                    RESULT = null;
                
              CUPparserresult = new Symbol(4/*expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // strings ::= STRING 
            {
              String RESULT = null;
		int stleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int stright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		String st = (String)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  RESULT = st.substring(1, st.length() - 1);
                
              CUPparserresult = new Symbol(3/*strings*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // strings ::= strings COMMA STRING 
            {
              String RESULT = null;
		int stsleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left;
		int stsright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).right;
		String sts = (String)((Symbol) CUPparserstack.elementAt(CUPparsertop-2)).value;
		int stleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int stright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		String st = (String)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  RESULT = sts + st.substring(1, st.length() - 1);
                
              CUPparserresult = new Symbol(3/*strings*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comp_expr ::= expr 
            {
              Boolean RESULT = null;
		int eleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int eright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Object e = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (e instanceof Boolean)
                    RESULT = (Boolean) e;
                  else
                    RESULT = null;
                
              CUPparserresult = new Symbol(2/*comp_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // comp_expr ::= ID IS NOT NULL 
            {
              Boolean RESULT = null;
		int idleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-3)).left;
		int idright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-3)).right;
		String id = (String)((Symbol) CUPparserstack.elementAt(CUPparsertop-3)).value;
		
                  if (message.getProp(id) == null)
                    RESULT = new Boolean("FALSE");
                  else
                    RESULT = new Boolean("TRUE");
                
              CUPparserresult = new Symbol(2/*comp_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-3)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // comp_expr ::= ID IS NULL 
            {
              Boolean RESULT = null;
		int idleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left;
		int idright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).right;
		String id = (String)((Symbol) CUPparserstack.elementAt(CUPparsertop-2)).value;
		
                  if (message.getProp(id) == null)
                    RESULT = new Boolean("TRUE");
                  else
                    RESULT = new Boolean("FALSE");
                
              CUPparserresult = new Symbol(2/*comp_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // comp_expr ::= ID NOT LIKE STRING ESCAPE STRING 
            {
              Boolean RESULT = null;
		int idleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-5)).left;
		int idright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-5)).right;
		String id = (String)((Symbol) CUPparserstack.elementAt(CUPparsertop-5)).value;
		int st1left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left;
		int st1right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).right;
		String st1 = (String)((Symbol) CUPparserstack.elementAt(CUPparsertop-2)).value;
		int st2left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int st2right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		String st2 = (String)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (message.getProp(id) == null)
                    RESULT = null;

                  else if (message.getProp(id) instanceof String) {
                    StringBuffer stBuff = new StringBuffer(st1.substring(1, st1.length() - 1));
                    char esc = st2.charAt(1);

                    for (int i = 0; i < stBuff.length(); i++) {
                      if (stBuff.charAt(i) == esc)
                        i++ ;
                      else if (stBuff.charAt(i) == '_')
                        stBuff.setCharAt(i, '.');
                      else if (stBuff.charAt(i) == '%') {
                        stBuff.setCharAt(i, '.');
                        stBuff.insert(i + 1, '*');
                        i++ ;
                      }
                    }
                    st1 = stBuff.toString(); 
                    org.apache.regexp.RE regExp = new org.apache.regexp.RE(st1);
                    RESULT = new Boolean(! regExp.match((String) message.getProp(id)));
                  }

                  else
                    // Comparison of non like values returns FALSE.
                    RESULT = new Boolean("FALSE");
                
              CUPparserresult = new Symbol(2/*comp_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-5)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // comp_expr ::= ID LIKE STRING ESCAPE STRING 
            {
              Boolean RESULT = null;
		int idleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-4)).left;
		int idright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-4)).right;
		String id = (String)((Symbol) CUPparserstack.elementAt(CUPparsertop-4)).value;
		int st1left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left;
		int st1right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).right;
		String st1 = (String)((Symbol) CUPparserstack.elementAt(CUPparsertop-2)).value;
		int st2left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int st2right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		String st2 = (String)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (message.getProp(id) == null)
                    RESULT = null;

                  else if (message.getProp(id) instanceof String) {
                    StringBuffer stBuff = new StringBuffer(st1.substring(1, st1.length() - 1));
                    char esc = st2.charAt(1);

                    for (int i = 0; i < stBuff.length(); i++) {
                      if (stBuff.charAt(i) == esc)
                        i++ ;
                      else if (stBuff.charAt(i) == '_')
                        stBuff.setCharAt(i, '.');
                      else if (stBuff.charAt(i) == '%') {
                        stBuff.setCharAt(i, '.');
                        stBuff.insert(i + 1, '*');
                        i++ ;
                      }
                    }
                    st1 = stBuff.toString(); 
                    org.apache.regexp.RE regExp = new org.apache.regexp.RE(st1);
                    RESULT = new Boolean(regExp.match((String) message.getProp(id)));
                  }

                  else
                    // Comparison of non like values returns FALSE.
                    RESULT = new Boolean("FALSE");
                
              CUPparserresult = new Symbol(2/*comp_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-4)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comp_expr ::= ID NOT LIKE STRING 
            {
              Boolean RESULT = null;
		int idleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-3)).left;
		int idright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-3)).right;
		String id = (String)((Symbol) CUPparserstack.elementAt(CUPparsertop-3)).value;
		int stleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int stright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		String st = (String)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (message.getProp(id) == null)
                    RESULT = null;

                  else if (message.getProp(id) instanceof String) {
                    StringBuffer stBuff = new StringBuffer(st.substring(1, st.length() - 1));

                    for (int i = 0; i < stBuff.length(); i++) {
                      if (stBuff.charAt(i) == '_')
                        stBuff.setCharAt(i, '.');
                      else if (stBuff.charAt(i) == '%') {
                        stBuff.setCharAt(i, '.');
                        stBuff.insert(i + 1, '*');
                        i++ ;
                      }
                    }

                    st = stBuff.toString(); 
                    org.apache.regexp.RE regExp = new org.apache.regexp.RE(st);
                    RESULT = new Boolean(! regExp.match((String) message.getProp(id)));
                  }
                  else
                    // Comparison of non like values returns FALSE.
                    RESULT = new Boolean("FALSE");
                
              CUPparserresult = new Symbol(2/*comp_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-3)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comp_expr ::= ID LIKE STRING 
            {
              Boolean RESULT = null;
		int idleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left;
		int idright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).right;
		String id = (String)((Symbol) CUPparserstack.elementAt(CUPparsertop-2)).value;
		int stleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int stright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		String st = (String)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (message.getProp(id) == null)
                    RESULT = null;

                  if (message.getProp(id) instanceof String) {
                    StringBuffer stBuff = new StringBuffer(st.substring(1, st.length() - 1));

                    for (int i = 0; i < stBuff.length(); i++) {
                      if (stBuff.charAt(i) == '_')
                        stBuff.setCharAt(i, '.');
                      else if (stBuff.charAt(i) == '%') {
                        stBuff.setCharAt(i, '.');
                        stBuff.insert(i + 1, '*');
                        i++ ;
                      }
                    }

                    st = stBuff.toString(); 
                    org.apache.regexp.RE regExp = new org.apache.regexp.RE(st);
                    RESULT = new Boolean(regExp.match((String) message.getProp(id)));
                  }
                  else
                    // Comparison of non like values returns FALSE.
                    RESULT = new Boolean("FALSE");
                
              CUPparserresult = new Symbol(2/*comp_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comp_expr ::= ID NOT IN LPAREN strings RPAREN 
            {
              Boolean RESULT = null;
		int idleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-5)).left;
		int idright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-5)).right;
		String id = (String)((Symbol) CUPparserstack.elementAt(CUPparsertop-5)).value;
		int stsleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-1)).left;
		int stsright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-1)).right;
		String sts = (String)((Symbol) CUPparserstack.elementAt(CUPparsertop-1)).value;
		
                  if (message.getProp(id) == null)
                    RESULT = null;

                  else if (message.getProp(id) instanceof String) {
                    if (sts.indexOf((String) message.getProp(id)) == -1)
                      RESULT = new Boolean("TRUE");
                    else
                      RESULT = new Boolean("FALSE");
                  }
                  else
                    // Comparison of non like values returns FALSE.
                    RESULT = new Boolean("FALSE");
                
              CUPparserresult = new Symbol(2/*comp_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-5)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // comp_expr ::= ID IN LPAREN strings RPAREN 
            {
              Boolean RESULT = null;
		int idleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-4)).left;
		int idright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-4)).right;
		String id = (String)((Symbol) CUPparserstack.elementAt(CUPparsertop-4)).value;
		int stsleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-1)).left;
		int stsright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-1)).right;
		String sts = (String)((Symbol) CUPparserstack.elementAt(CUPparsertop-1)).value;
		
                  if (message.getProp(id) == null)
                    RESULT = null;

                  else if (message.getProp(id) instanceof String) {
                    if (sts.indexOf((String) message.getProp(id)) == -1)
                      RESULT = new Boolean("FALSE");
                    else
                      RESULT = new Boolean("TRUE");
                  }
                  else
                    // Comparison of non like values returns FALSE.
                    RESULT = new Boolean("FALSE");
                
              CUPparserresult = new Symbol(2/*comp_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-4)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // comp_expr ::= expr NOTBETWEEN expr AND expr 
            {
              Boolean RESULT = null;
		int e1left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-4)).left;
		int e1right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-4)).right;
		Object e1 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-4)).value;
		int e2left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left;
		int e2right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).right;
		Object e2 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-2)).value;
		int e3left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int e3right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Object e3 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (e1 == null || e2 == null || e3 == null)
                    RESULT = null;

                  else if (e1 instanceof Double && e2 instanceof Double && e3 instanceof Double)
                    RESULT = new Boolean(
                      (((Double) e1).doubleValue() < ((Double) e2).doubleValue()) ||
                      (((Double) e1).doubleValue() > ((Double) e3).doubleValue())
                    );

                  else
                    // Comparison of non like values returns FALSE.
                    RESULT = new Boolean("FALSE");
                
              CUPparserresult = new Symbol(2/*comp_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-4)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // comp_expr ::= expr BETWEEN expr AND expr 
            {
              Boolean RESULT = null;
		int e1left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-4)).left;
		int e1right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-4)).right;
		Object e1 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-4)).value;
		int e2left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left;
		int e2right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).right;
		Object e2 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-2)).value;
		int e3left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int e3right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Object e3 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (e1 == null || e2 == null || e3 == null)
                    RESULT = null;

                  else if (e1 instanceof Double && e2 instanceof Double && e3 instanceof Double)
                    RESULT = new Boolean(
                      (((Double) e1).doubleValue() >= ((Double) e2).doubleValue()) &&
                      (((Double) e1).doubleValue() <= ((Double) e3).doubleValue())
                    );

                  else
                    // Comparison of non like values returns FALSE.
                    RESULT = new Boolean("FALSE");
                
              CUPparserresult = new Symbol(2/*comp_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-4)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // comp_expr ::= expr NEQ expr 
            {
              Boolean RESULT = null;
		int e1left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left;
		int e1right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).right;
		Object e1 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-2)).value;
		int e2left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int e2right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Object e2 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (e1 == null || e2 == null)
                    RESULT = null;

                  else if (e1 instanceof Double && e2 instanceof Double)
                    RESULT = new Boolean(
                      ((Double) e1).doubleValue() == ((Double) e2).doubleValue()
                    );
                  else if (e1 instanceof Boolean && e2 instanceof Boolean)
                    RESULT = new Boolean(
                      ! ((Boolean) e1).equals((Boolean) e2)
                    );
                  else if (e1 instanceof String && e2 instanceof String)
                    RESULT = new Boolean(
                      ! ((String) e1).equals((String) e2)
                    );

                  else
                    // Comparison of non like values returns FALSE.
                    RESULT = new Boolean("FALSE");
                
              CUPparserresult = new Symbol(2/*comp_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // comp_expr ::= expr EQ expr 
            {
              Boolean RESULT = null;
		int e1left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left;
		int e1right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).right;
		Object e1 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-2)).value;
		int e2left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int e2right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Object e2 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (e1 == null || e2 == null)
                    RESULT = null;

                  else if (e1 instanceof Double && e2 instanceof Double)
                    RESULT = new Boolean(
                      ((Double) e1).doubleValue() == ((Double) e2).doubleValue()
                    );
                  else if (e1 instanceof Boolean && e2 instanceof Boolean)
                    RESULT = new Boolean(
                      ((Boolean) e1).equals((Boolean) e2)
                    );
                  else if (e1 instanceof String && e2 instanceof String)
                    RESULT = new Boolean(
                      ((String) e1).equals((String) e2)
                    );

                  else
                    // Comparison of non like values returns FALSE.
                    RESULT = new Boolean("FALSE");
                
              CUPparserresult = new Symbol(2/*comp_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // comp_expr ::= expr LE expr 
            {
              Boolean RESULT = null;
		int e1left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left;
		int e1right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).right;
		Object e1 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-2)).value;
		int e2left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int e2right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Object e2 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (e1 == null || e2 == null)
                    RESULT = null;

                  else if (e1 instanceof Double && e2 instanceof Double)
                    RESULT = new Boolean(
                      ((Double) e1).doubleValue() <= ((Double) e2).doubleValue()
                    );

                  else
                    // Comparison of non like values returns FALSE.
                    RESULT = new Boolean("FALSE");
                
              CUPparserresult = new Symbol(2/*comp_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // comp_expr ::= expr LT expr 
            {
              Boolean RESULT = null;
		int e1left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left;
		int e1right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).right;
		Object e1 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-2)).value;
		int e2left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int e2right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Object e2 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (e1 == null || e2 == null)
                    RESULT = null;

                  else if (e1 instanceof Double && e2 instanceof Double)
                    RESULT = new Boolean(
                      ((Double) e1).doubleValue() < ((Double) e2).doubleValue()
                    );

                  else
                    // Comparison of non like values returns FALSE.
                    RESULT = new Boolean("FALSE");
                
              CUPparserresult = new Symbol(2/*comp_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // comp_expr ::= expr GE expr 
            {
              Boolean RESULT = null;
		int e1left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left;
		int e1right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).right;
		Object e1 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-2)).value;
		int e2left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int e2right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Object e2 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (e1 == null || e2 == null)
                    RESULT = null;

                  else if (e1 instanceof Double && e2 instanceof Double)
                    RESULT = new Boolean(
                      ((Double) e1).doubleValue() >= ((Double) e2).doubleValue()
                    );

                  else
                    // Comparison of non like values returns FALSE.
                    RESULT = new Boolean("FALSE");
                
              CUPparserresult = new Symbol(2/*comp_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // comp_expr ::= expr GT expr 
            {
              Boolean RESULT = null;
		int e1left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left;
		int e1right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).right;
		Object e1 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-2)).value;
		int e2left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int e2right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Object e2 = (Object)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (e1 == null || e2 == null)
                    RESULT = null;

                  else if (e1 instanceof Double && e2 instanceof Double)
                    RESULT = new Boolean(
                      ((Double) e1).doubleValue() > ((Double) e2).doubleValue()
                    );

                  else
                    // Comparison of non like values returns FALSE.
                    RESULT = new Boolean("FALSE");
                
              CUPparserresult = new Symbol(2/*comp_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // comp_expr ::= LPAREN cond_expr RPAREN 
            {
              Boolean RESULT = null;
		int condleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-1)).left;
		int condright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-1)).right;
		Boolean cond = (Boolean)((Symbol) CUPparserstack.elementAt(CUPparsertop-1)).value;
		
                  RESULT = cond;
                
              CUPparserresult = new Symbol(2/*comp_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cond_expr ::= comp_expr 
            {
              Boolean RESULT = null;
		int compleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int compright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Boolean comp = (Boolean)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  RESULT = comp;
                
              CUPparserresult = new Symbol(1/*cond_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cond_expr ::= NOT cond_expr 
            {
              Boolean RESULT = null;
		int condleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int condright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Boolean cond = (Boolean)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (cond != null)
                    RESULT = new Boolean(
                      ! cond.booleanValue()
                    );
                  else
                    RESULT = new Boolean("FALSE");
                
              CUPparserresult = new Symbol(1/*cond_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-1)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cond_expr ::= cond_expr AND cond_expr 
            {
              Boolean RESULT = null;
		int cond1left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left;
		int cond1right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).right;
		Boolean cond1 = (Boolean)((Symbol) CUPparserstack.elementAt(CUPparsertop-2)).value;
		int cond2left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int cond2right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Boolean cond2 = (Boolean)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (cond1 != null && cond2 != null)
                    RESULT = new Boolean(
                      cond1.booleanValue() && cond2.booleanValue()
                    );
                  else
                    RESULT = new Boolean("FALSE");
                
              CUPparserresult = new Symbol(1/*cond_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= cond_expr EOF 
            {
              Object RESULT = null;
		int start_valleft = ((Symbol)CUPparserstack.elementAt(CUPparsertop-1)).left;
		int start_valright = ((Symbol)CUPparserstack.elementAt(CUPparsertop-1)).right;
		Boolean start_val = (Boolean)((Symbol) CUPparserstack.elementAt(CUPparsertop-1)).value;
		RESULT = start_val;
              CUPparserresult = new Symbol(0/*$START*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-1)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          /* ACCEPT */
          CUPparserparser.done_parsing();
          return CUPparserresult;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // cond_expr ::= cond_expr OR cond_expr 
            {
              Boolean RESULT = null;
		int cond1left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left;
		int cond1right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).right;
		Boolean cond1 = (Boolean)((Symbol) CUPparserstack.elementAt(CUPparsertop-2)).value;
		int cond2left = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).left;
		int cond2right = ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right;
		Boolean cond2 = (Boolean)((Symbol) CUPparserstack.elementAt(CUPparsertop-0)).value;
		
                  if (cond1 != null && cond2 != null)
                    RESULT = new Boolean(
                      cond1.booleanValue() || cond2.booleanValue()
                    );
                  else if (cond1 == null && cond2 != null)
                    RESULT = cond2;
                  else if (cond1 != null && cond2 == null)
                    RESULT = cond1;
                  else
                    RESULT = new Boolean("FALSE");
                
              CUPparserresult = new Symbol(1/*cond_expr*/, ((Symbol)CUPparserstack.elementAt(CUPparsertop-2)).left, ((Symbol)CUPparserstack.elementAt(CUPparsertop-0)).right, RESULT);
            }
          return CUPparserresult;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

